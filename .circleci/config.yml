# CircleCI v2.1 Config
version: 2.1

##
# orbs
#
# Orbs used in this pipeline
###
orbs:
  slack: circleci/slack@3.4.2
  pr-tools: mojaloop/pr-tools@0.1.10


##
# defaults
#
# YAML defaults templates, in alphabetical order
##
defaults_Dependencies: &defaults_Dependencies |
    apk --no-cache add git
    apk --no-cache add ca-certificates
    apk --no-cache add curl
    apk --no-cache add openssh-client
    apk --no-cache add bash
    apk add --no-cache -t build-dependencies make gcc g++ python libtool autoconf automake
    npm config set unsafe-perm true
    npm install -g node-gyp

defaults_awsCliDependencies: &defaults_awsCliDependencies |
    apk --no-cache add \
            python \
            py-pip \
            groff \
            less \
            mailcap
    pip install --upgrade awscli==1.14.5 s3cmd==2.0.1 python-magic
    apk -v --purge del py-pip

defaults_npm_auth: &defaults_npm_auth
  name: Update NPM registry auth token
  command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc

defaults_npm_publish_release: &defaults_npm_publish_release
  name: Publish NPM $RELEASE_TAG artifact
  command: |
    source $BASH_ENV
    echo "Publishing tag $RELEASE_TAG"
    npm publish --tag $RELEASE_TAG --access public

defaults_npm_publish_version: &defaults_npm_publish
  name: Update version to prerelease
  command: |
    source $BASH_ENV
    echo "Publishing tag $CIRCLE_TAG"
    npm publish --tag $CIRCLE_TAG --access public

defaults_license_scanner: &defaults_license_scanner
  name: Install and set up license-scanner
  command: |
    git clone https://github.com/mojaloop/license-scanner /tmp/license-scanner
    cd /tmp/license-scanner && make build default-files set-up

##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker:
    working_directory: /home/circleci/project
    docker: 
      - image: node:12.16.0-alpine

  default-machine:
    machine:
      image: ubuntu-1604:201903-01
  

##
# Jobs
#
# A map of CircleCI jobs
##
jobs:
  setup:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          name: Update NPM install
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules

  test-unit:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Create dir for test results
          command: mkdir -p ./test/results
      - run:
          name: Execute unit tests
          command: npm -s run test:unit
      - store_test_results:
          path: ./junit.xml

  test-coverage:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          name: Install AWS CLI dependencies
          command: *defaults_awsCliDependencies
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Execute code coverage check
          command: npm -s run test:coverage
      - store_artifacts:
          path: coverage
          prefix: test
      - store_test_results:
          path: coverage/lcov.info
      - run:
          name: Copy code coverage to SonarQube
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ];
            then
                echo "Sending lcov.info to SonarQube..."
                aws s3 cp coverage/lcov.info $AWS_S3_DIR_SONARQUBE/central-services-metrics/lcov.info
            else
                echo "Not a release (env CIRCLE_BRANCH != 'master'), skipping sending lcov.info to SonarQube."
            fi
          
  vulnerability-check:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Create dir for test results
          command: mkdir -p ./audit/results
      - run:
          name: Check for new npm vulnerabilities
          command: npm run audit:check --silent -- --json > ./audit/results/auditResults.json 
      - store_artifacts:
          path: ./audit/results
          prefix: audit

  audit-licenses:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          <<: *defaults_license_scanner
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Prune non-production packages before running license-scanner
          command: npm prune --production
      - run:
          name: Run the license-scanner
          command: cd /tmp/license-scanner && pathToRepo=$CIRCLE_WORKING_DIRECTORY make run
      - store_artifacts:
          path: /tmp/license-scanner/results
          prefix: licenses

  build:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: setup environment vars for LATEST release
          command: |
            echo 'export RELEASE_TAG=$RELEASE_TAG_PROD' >> $BASH_ENV
      - run:
          <<: *defaults_npm_auth
      - run:
          <<: *defaults_npm_publish_release
      - slack/status:
          webhook: "$SLACK_WEBHOOK_ANNOUNCEMENT"
          success_message: '*"${CIRCLE_PROJECT_REPONAME}"* - Release \`"${CIRCLE_TAG}"\` \nhttps://github.com/mojaloop/"${CIRCLE_PROJECT_REPONAME}"/releases/tag/"${CIRCLE_TAG}"'



# jobs:
#   setup:
#     <<: *defaults_working_directory
#     <<: *defaults_docker_node
#     steps:
#       - run:
#           name: Install general dependencies
#           command: *defaults_Dependencies
#       - checkout
#       - run:
#           name: Update NPM install
#           command: npm install
#       - save_cache:
#           key: dependency-cache-{{ checksum "package.json" }}
#           paths:
#             - node_modules

#   # test-unit:
#   #   <<: *defaults_working_directory
#   #   <<: *defaults_docker_node
#   #   steps:
#   #     - run:
#   #         name: Install general dependencies
#   #         command: *defaults_Dependencies
#   #     - checkout
#   #     - restore_cache:
#   #         key: dependency-cache-{{ checksum "package.json" }}
#   #     - run:
#   #         name: Install tape, tapes and tap-xunit
#   #         command: npm install tape tapes tap-xunit
#   #     - run:
#   #         name: Create dir for test results
#   #         command: mkdir -p ./test/results
#   #     - run:
#   #         name: Execute unit tests
#   #         command: npm -s run test:xunit > ./test/results/tape.xml
#   #     - store_artifacts:
#   #         path: ./test/results
#   #         prefix: test
#   #     - store_test_results:
#   #         path: ./test/results

#   # test-coverage:
#   #   <<: *defaults_working_directory
#   #   <<: *defaults_docker_node
#   #   steps:
#   #     - run:
#   #         name: Install general dependencies
#   #         command: *defaults_Dependencies
#   #     - run:
#   #         name: Install AWS CLI dependencies
#   #         command: *defaults_awsCliDependencies
#   #     - checkout
#   #     - restore_cache:
#   #         key: dependency-cache-{{ checksum "package.json" }}
#   #     - run:
#   #         name: Execute code coverage check
#   #         command: npm -s run test:coverage-check
#   #     - store_artifacts:
#   #         path: coverage
#   #         prefix: test
#   #     - store_test_results:
#   #         path: coverage/lcov.info
#   #     - run:
#   #         name: Copy code coverage to SonarQube
#   #         command: |
#   #           if [ "${CIRCLE_BRANCH}" == "master" ];
#   #           then
#   #               echo "Sending lcov.info to SonarQube..."
#   #               aws s3 cp coverage/lcov.info $AWS_S3_DIR_SONARQUBE/central-services-stream/lcov.info
#   #           else
#   #               echo "Not a release (env CIRCLE_BRANCH != 'master'), skipping sending lcov.info to SonarQube."
#   #           fi

#   vulnerability-check:
#     <<: *defaults_working_directory
#     <<: *defaults_docker_node
#     steps:
#       - run:
#           name: Install general dependencies
#           command: *defaults_Dependencies
#       - checkout
#       - restore_cache:
#           key: dependency-cache-{{ checksum "package.json" }}
#       - run:
#           name: Create dir for test results
#           command: mkdir -p ./audit/results
#       - run:
#           name: Check for new npm vulnerabilities
#           # TODO: change back to silent, we make this verbose to catch this bug: https://github.com/mojaloop/project/issues/958
#           command: npm run audit:check --verbose -- --json > ./audit/results/auditResults.json
#       - store_artifacts:
#           path: ./audit/results
#           prefix: audit

#   audit-licenses:
#     <<: *defaults_working_directory
#     <<: *defaults_docker_node
#     steps:
#       - checkout
#       - run:
#           name: Install general dependencies
#           command: *defaults_Dependencies
#       - run:
#           <<: *defaults_license_scanner
#       - restore_cache:
#           key: dependency-cache-{{ checksum "package.json" }}
#       - run:
#           name: Prune non-production packages before running license-scanner
#           command: npm prune --production
#       - run:
#           name: Run the license-scanner
#           command: cd /tmp/license-scanner && pathToRepo=$CIRCLE_WORKING_DIRECTORY make run
#       - store_artifacts:
#           path: /tmp/license-scanner/results
#           prefix: licenses

#   build-snapshot:
#     <<: *defaults_working_directory
#     <<: *defaults_docker_node
#     steps:
#       - run:
#           name: Install general dependencies
#           command: *defaults_Dependencies
#       - checkout
#       - run:
#           name: setup environment vars for SNAPSHOT release
#           command: |
#             echo 'export RELEASE_TAG=$RELEASE_TAG_SNAPSHOT' >> $BASH_ENV
#       - run:
#           <<: *defaults_npm_auth
#       - run:
#           <<: *defaults_npm_publish_release
#       - run:
#           <<: *defaults_slack_announcement

#   build:
#     <<: *defaults_working_directory
#     <<: *defaults_docker_node
#     steps:
#       - run:
#           name: Install general dependencies
#           command: *defaults_Dependencies
#       - checkout
#       - run:
#           name: setup environment vars for LATEST release
#           command: |
#             echo 'export RELEASE_TAG=$RELEASE_TAG_PROD' >> $BASH_ENV
#       - run:
#           <<: *defaults_npm_auth
#       - run:
#           <<: *defaults_npm_publish_release
#       - run:
#           <<: *defaults_slack_announcement

##
# Workflows
#
# CircleCI Workflow config
##
workflows:
  version: 2
  build_and_test:
    jobs:
      - pr-tools/pr-title-check:
          context: org-global
      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-unit:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-coverage:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - vulnerability-check:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - audit-licenses:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - build:
          context: org-global
          requires:
            - setup
            - test-unit
            - test-coverage
            - vulnerability-check
            - audit-licenses
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore:
                - /.*/